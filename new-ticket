#!/usr/bin/env bash

# Prepare for a fresh Drupal 8 branch.
# Assumes that you:
# - are currently in the target directory
# - already have a feature branch checked out

# With gratitude to Ben Thornton
# @see https://git.businesswire.com/projects/HQ/repos/hq-tools/browse/dev/reset-dev

echo "Hi!
I'm going to help you refresh your local dev environment to start a new ticket."

# These settings should never change:
# @TODO add an option to start from master and create the feature branch
new_branch=$(git symbolic-ref --short HEAD)
set +x
pwd=$(pwd)

# Load variables from the included config file.  This makes it easier for users to change key variables.
# @TODO add a wizard to provide config if it doesn't already exist
local_config=$pwd/.new-ticket-config
global_config=. config
if [ -f $local_config ]; then
    echo "I'm going to use the local configuration file you already set up for this project ($local_config)."
    . $local_config
elif [ global_config ]; then
    echo "I didn't find local config for this project, so I'll use your global config from your home directory."
    . config
else
    echo "I need to ask you some questions in order to set up your environment correctly.
    If you prefer, you can provide a manual config file in one of two locations:
    - Global config: put a 'config' file in the same directory as the new-ticket script
    - Local config: add '.new-ticket-config' to your local directory."

    # @TODO: take variable objects and pass through a loop to create three separate arrays: variable names, defaults, help text
    upstream_repo_default="origin"              # Name of the upstream repository in git
    fork_repo_default="fork"                    # Name of your forked version of the repository
    base_branch_default="master"                # The master branch.  Usually master (but not always)
    guest_path_default="/var/www/bwd"           # The path to your codebase inside the VM
    runner_default="composer install"           # Use this to run task runners like composer or npm.  Runs outside the VM.
    vm_start_default="vagrant up --provision"   # Command to start & reprovision the VM
    vm_ssh_default="vagrant ssh -c"             # How to send commands from the host to the VM

    read -p "Name of the upstream repository in git [$upstream_repo_default]: " upstream_repo
    upstream_repo="${upstream_repo:-$upstream_repo_default}"
    read -p "Name of your forked version of the repository [$fork_repo_default]: " fork_repo
    fork_repo="${fork_repo:-$fork_repo_default}"
    read -p "The master branch.  Usually master (but not always) [$base_branch_default]: " base_branch
    base_branch="${base_branch:-$base_branch_default}"
    read -p "The path to your codebase inside the VM [$guest_path_default]: " guest_path
    guest_path="${guest_path:-$guest_path_default}"
    read -p "Task runner [$runner_default]: " runner
    runner="${runner:-$runner_default}"
    read -p "Command to start & reprovision the VM [$vm_start_default]: " vm_start
    vm_start="${vm_start:-$vm_start}"
    read -p "How to send commands from the host to the VM [$vm_ssh_default]: " vm_ssh
    vm_ssh="${vm_ssh:-$vm_ssh_default}"
    # @TODO: store config in project file or home directory

fi

# Commenting this out for now because I think it's redundant.
# echo "OK cool.  Values set:
# - Name of the upstream repository in git:           $upstream_repo
# - Name of your forked version of the repository:    $fork_repo
# - The master branch:                                $base_branch
# - The path to your codebase inside the VM:          $guest_path
# - Task runner:                                      $runner
# - Command to start & reprovision the VM:            $vm_start
# - How to send commands from the host to the VM:     $vm_ssh
# "

# Description of tasks to be performed, repeats at both the beginning and end of the script.
tasks="- Pull a fresh copy of $upstream_repo/$base_branch
- Push to $fork_repo/$base_branch
- Push to $fork_repo/$new_branch and set upstream
- Task runner: $runner
- Turn on the virtual machine: $vm_start
- Run commands inside the VM"

read -p "Here's what I can do:
$tasks

In order for this to work, please make sure:
- You're in the base directory for your project
- You have forked the 'upstream' repository and created your own
- You've already created a feature branch for the new ticket
- You've updated the enclosed 'config' file with the correct repositories and branches

Press Enter to continue, or ctrl-c to cancel."


echo "
First I'm going to update the upstream master branch."
# Even though we've already created a feature branch, we want to refresh master, and also 
git checkout "$base_branch" || {
    >&2 echo "fatal: cannot checkout $base_branch"
    exit 3
}

git pull $upstream_repo $base_branch

echo "
Now I'm going to push the latest upstream master to your fork master."
git push $fork_repo $base_branch

echo "
OK - now we can switch back to your feature branch.  I'm also going to set $new_branch to track $fork_repo."
git checkout $new_branch
git push $fork_repo $new_branch --set-upstream

echo "
I'm going to see if there's anything to install."
# See if there's anything new to install from Composer.
$runner

echo "
Let's turn this thing on."
# Turn on the VM and reprovision it if necessary
$vm_start

echo "
I'm going to run some commands inside the VM now."
# Automated steps inside the VM.  Default steps:
# - Rebuild the site and run the automated tests.
# - Generate a valid URL for a one-time login.
# - Import stored config.
for current in "${commands[@]}"
do
    current_command="cd $guest_path; $current"
    $vm_ssh "$current_command"
done

minutes=`expr $SECONDS / 60`
remaining=`expr $SECONDS - $minutes \* 60`

echo "
Congratulations, we're done!  Here's what we did:
$tasks

Script completed in only $minutes:$remaining.

Now go forth and be awesome."